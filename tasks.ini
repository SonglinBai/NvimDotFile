# vim: set fenc=utf-8 ft=dosini:

[echo-path]
# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command=echo "$(VIM_FILEPATH)"
# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)
# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=quickfix
# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
errorformat=%f:%l:%m
# save file before execute
save=1

# cmake configure
[cmake-config]
command/win32=powershell -Command "mkdir -Force build | Out-Null" && cmake -B ./build -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -G Ninja && mklink compile_commands.json build\compile_commands.json
command/macos=mkdir build && cmake -B ./build -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -G Ninja && ln -s build/compile_commands.json compile_commands.json
output=quickfix
errorformat=%f:%l:%m
cwd=$(VIM_ROOT)
save=2

# cmake build
[cmake-build]
command=cmake --build build --target all
output=quickfix
errorformat=%f:%l:%m
cwd=$(VIM_ROOT)
save=2

[cmake-run]
command="build/$(?target)"
output=terminal
errorformat=%f:%l:%m
cwd=$(VIM_ROOT)
save=2

[file-build]
command:c,cpp/win32=clang "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe" -g
command:c,cpp/macos=clang++ "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -g
output=quickfix
errorformat=%f:%l:%m
cwd=$(VIM_FILEDIR)
save=2

[file-run]
command:c,cpp/win32=clang "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT).exe" -g && "$(VIM_PATHNOEXT).exe"
command:c,cpp/macos=clang++ "$(VIM_FILEPATH)" -o "$(VIM_PATHNOEXT)" -g && "$(VIM_PATHNOEXT)"
output=terminal
pos=macterm
errorformat=%f:%l:%m
cwd=$(VIM_FILEDIR)
save=2
